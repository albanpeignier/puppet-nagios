#!/usr/bin/env python

import docker
import sys
import configparser

class NagiosCheck:
    def __init__(self,host,service):
        self.host = host
        self.service = service
        self.status = 3
        self.subs = []
        self.details = []
    def __enter__(self):
        return self
    def ok(self,text):
        if self.status in [3]:
            self.status = 0
        self.subs.append("OK: %s"%(text,))
    def warning(self,text):
        if self.status in [0,3]:
            self.status = 1
        self.subs.append("W: %s"%(text,))
    def critical(self,text):
        if self.status in [0,1,3]:
            self.status = 2
        self.subs.append("C: %s"%(text,))
    def detail(self,text):
        self.details.append(text)
    def output(self):
        print("%s: %s"%(
            ['OK','WARNING','CRITICAL','UNKNOWN'][self.status],
            ' - '.join(self.subs)))
        for text in self.details:
            print(text)
        sys.exit(self.status)
    def __exit__(self, exc_type, exc_value, traceback):
        self.output()
        return exc_type == None


compose_service = sys.argv[1]

config = configparser.ConfigParser()
config.read('/etc/check_compose_service.d/{}.conf'.format(compose_service))


with NagiosCheck(compose_service,"Compose service") as ngc:
    client = docker.from_env()
    for section in config.sections():
        container_list = client.containers.list(filters={"label":"com.docker.compose.project={}".format(section)})
        for service in config[section]:
            expected = int(config[section][service])
            count = len(filter(lambda c: c.labels['com.docker.compose.service']==service, container_list))
            substatus = count == expected
            if substatus:
                ngc.ok(service)
            else:
                ngc.critical(service)
            ngc.detail("{}/{} : {}/{} ({})".format(section,service,count,expected, 'OK' if substatus else 'CRITICAL'))
